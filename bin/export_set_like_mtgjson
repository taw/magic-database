#!/usr/bin/env ruby

require_relative "../lib/magic_database"

class ExportSetLikeMtgjson
  attr_reader :set_name, :set_code

  def initialize(set_name_or_code, save_path)
    if set_names_to_codes[set_name_or_code]
      @set_name = set_name_or_code
      @set_code = set_names_to_codes[set_name_or_code]
    elsif set_codes_to_names[set_name_or_code]
      @set_code = set_name_or_code
      @set_name = set_codes_to_names[set_name_or_code]
    else
      raise "#{set_name_or_code} is neither known set name or known set code"
    end
    @save_path = save_path
  end

  def set_names_to_codes
    unless @set_names_to_codes
      @set_names_to_codes = {}
      (Pathname(__dir__) + "../data/set_codes.txt").readlines.map(&:chomp).each do |line|
        set_code, set_name = line.split(/\s+/, 2)
        @set_names_to_codes[set_name] = set_code
      end
    end
    @set_names_to_codes
  end

  def set_codes_to_names
    @set_codes_to_names ||= set_names_to_codes.invert
  end

  def guess_mtgjson_imagename(card)
    # Pertty much reverse engineering from a bunch of examples
    # Just for diffing
    base_name = card.name.downcase.tr(":", "")
    "#{base_name}#{card.current_variation}"
  end

  def guess_mtgjson_id(set_code, card)
    Digest::SHA1.hexdigest(set_code + card.name + guess_mtgjson_imagename(card))
  end

  def guess_mci_number(card)
    nil
  end

  def card_ids
    @card_ids ||= Gatherer.card_ids_for_set(@set_name).map{|x| x[1]}.sort
  end

  def metadata_path
    Pathname("#{__dir__}/../data/set_metadata/#{set_code}.json")
  end

  def export
    if metadata_path.exist?
      json = JSON.parse(metadata_path.read)
    else
      json = {}
    end

    json["name"] = @set_name
    json["cards"] = []

    card_ids.each do |id|
      card_page = GathererDetailsPage.new(id).primary_card_details_box
      printed_card_page = GathererPrintedDetailsPage.new(id).primary_card_details_box
      languages = GathererLanguagesPage.new(id).languages
      legalities = GathererPrintingsPage.new(id).legalities

      card = {}
      card["artist"] = card_page.artist
      card["cmc"] = card_page.converted_mana_cost
      card["colorIdentity"] = card_page.color_identity
      card["colors"] = card_page.colors
      card["flavor"] = card_page.flavor_text
      card["foreignNames"] = languages.map{|row|
        {
          "language" => row[2],
          "name" => row[1],
          "multiverseid" => row[0],
        }
      }.sort_by{|l| [l["language"], l["multiverseid"]] }
      # card["id"] = guess_mtgjson_id("LEA", card_page)
      card["imageName"] = guess_mtgjson_imagename(card_page)
      card["layout"] = card_page.layout
      card["legalities"] = legalities.sort.map{|f,l|
        {
          "format" => f,
          "legality" => l,
        }
      }
      card["loyalty"] = card_page.loyalty
      card["manaCost"] = card_page.mana_cost
      # card["mciNumber"] = card_page.number || guess_mci_number(card_page)
      card["multiverseid"] = id
      card["name"] = card_page.name
      card["names"] = card_page.names
      card["number"] = card_page.number
      card["originalText"] = printed_card_page.text
      card["originalType"] = printed_card_page.typeline.tr("-", "—")
      card["power"] = card_page.power
      card["printings"] = card_page.all_sets&.map{|row| set_names_to_codes[row[1]] }&.compact
      card["rarity"] = card_page.rarity
      card["rulings"] =  card_page.rulings.map{|date,text|
        {
          "date" => date,
          "text" => text.tr(%Q[’“”], %Q['""]).gsub("—", "--")
        }
      }
      card["reserved"] = true if ReservedList.include?(card_page.name)
      card["subtypes"] = card_page.subtypes
      card["supertypes"] = card_page.supertypes

      # That's just really weird encoding of those giant basic land symbols
      text = card_page.text
      if text =~ /\A[WUBRG]\z/
        if [
          "Forest",
          "Island",
          "Mountain",
          "Plains",
          "Snow-Covered Forest",
          "Snow-Covered Island",
          "Snow-Covered Mountain",
          "Snow-Covered Plains",
          "Snow-Covered Swamp",
          "Swamp",
        ].include?(card["name"])
          text = nil
        else
          raise "Unknown card with giant basic land symbol: #{card["name"]}"
        end
      end

      card["text"] = text
      card["toughness"] = card_page.toughness
      card["type"] = card_page.typeline
      card["types"] = card_page.types
      if card_page.variations
        card["variations"] = card_page.variations - [id]
      end
      card["watermark"] = card_page.watermark
      card.reject!{|k,v| !v or v == []}
      json["cards"] << card
    end

    Pathname(@save_path).parent.mkpath
    Pathname(@save_path).write(JSON.pretty_generate(json)+"\n")
  end
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} \"set name\" save_file_path.json"
  STDERR.puts "   or: #{$0} \"set code\" save_file_path.json"
  exit 1
end

ExportSetLikeMtgjson.new(*ARGV).export
