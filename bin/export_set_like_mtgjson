#!/usr/bin/env ruby

require_relative "../lib/magic_database"
require "json"
require "digest/sha1"

class ExportSetLikeMtgjson
  def initialize(set_name, save_path)
    @set_name = set_name
    @save_path = save_path
  end

  def guess_mtgjson_imagename(card)
    # Pertty much reverse engineering from a bunch of examples
    # Just for diffing
    base_name = card.name.downcase.tr(":", "")
    "#{base_name}#{card.current_variation}"
  end

  def guess_mtgjson_id(set_code, card)
    Digest::SHA1.hexdigest(set_code + card.name + guess_mtgjson_imagename(card))
  end

  def guess_mci_number(card)
    nil
  end

  def guess_layout(card)
    if card.text =~ /\ALevel up/
      "leveler"
    else
      "normal"
    end
  end

  def card_ids
    @card_ids ||= Gatherer.card_ids_for_set(@set_name).map{|x| x[1]}.sort
  end

  def export
    json = {}

    json["name"] = @set_name
    # json["code"] = "?"
    # json["gathererCode"] = "?"
    # json["magicCardsInfoCode"] = "?"
    # json["releaseDate"] = "?"
    # json["border"] = "?"
    # json["type"] = "?"
    # json["booster"] = "?"
    # json["mkm_name"] = "?"
    # json["mkm_id"] = "?"
    json["cards"] = []

    card_ids.each do |id|
      card_page = GathererDetailsPage.new(id).primary_card_details_box
      printed_card_page = GathererPrintedDetailsPage.new(id).primary_card_details_box
      languages = GathererLanguagesPage.new(id).languages
      legalities = GathererPrintingsPage.new(id).legalities

      card = {}
      card["artist"] = card_page.artist
      card["cmc"] = card_page.converted_mana_cost
      card["colorIdentity"] = card_page.color_identity
      card["colors"] = card_page.colors
      card["flavor"] = card_page.flavor_text
      card["foreignNames"] = languages.map{|row|
        {
          "language" => row[2],
          "name" => row[1],
          "multiverseid" => row[0],
        }
      }.sort_by{|l| [l["language"], l["multiverseid"]] }
      # card["id"] = guess_mtgjson_id("LEA", card_page)
      card["imageName"] = guess_mtgjson_imagename(card_page)
      card["layout"] = guess_layout(card_page)
      card["legalities"] = legalities.sort.map{|f,l|
        {
          "format" => f,
          "legality" => l,
        }
      }
      card["loyalty"] = card_page.loyalty
      card["manaCost"] = card_page.mana_cost
      # card["mciNumber"] = card_page.number || guess_mci_number(card_page)
      card["multiverseid"] = id
      card["name"] = card_page.name
      card["names"] = card_page.names
      card["number"] = card_page.number
      card["originalText"] = printed_card_page.text
      card["originalType"] = printed_card_page.typeline.tr("-", "—")
      card["power"] = card_page.power
      card["rarity"] = card_page.rarity
      card["rulings"] =  card_page.rulings.map{|date,text|
        {
          "date" => date,
          "text" => text.tr(%Q[’“”], %Q['""]).gsub("—", "--")
        }
      }
      card["reserved"] = true if ReservedList.include?(card_page.name)
      card["subtypes"] = card_page.subtypes
      card["supertypes"] = card_page.supertypes
      card["text"] = card_page.text
      card["toughness"] = card_page.toughness
      card["type"] = card_page.typeline
      card["types"] = card_page.types
      if card_page.variations
        card["variations"] = card_page.variations - [id]
      end
      card["watermark"] = card_page.watermark
      card.reject!{|k,v| !v or v == []}
      json["cards"] << card
    end

    Pathname(@save_path).write(JSON.pretty_generate(json)+"\n")
  end
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} \"set name\" save_file_path.json"
  exit 1
end

ExportSetLikeMtgjson.new(*ARGV).export
