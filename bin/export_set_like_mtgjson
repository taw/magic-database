#!/usr/bin/env ruby

require_relative "../lib/magic_database"
require "set"
require "json"
require "pathname"
require "digest/sha1"

class ExportSetLikeMtgjson
  def initialize(set_name, save_path)
    @set_name = set_name
    @save_path = save_path
  end

  def parse_types(typeline)
    known_supertypes = ["Basic", "Legendary", "Ongoing", "Snow", "World"]

    supertypes, types, subtypes = [], [], []

    if typeline =~ /(.*) \u2014 (.*)/
      subtypes = $2.split(" ")
      typeline = $1
    end
    types = typeline.split(" ")

    supertypes = types & known_supertypes
    types -= known_supertypes

    return supertypes, types, subtypes
  end

  def card_colors(info)
    return nil if info[:card_text] =~ /\bDevoid\b/
    result = []
    result << "White" if info[:mana_cost] =~ /W/
    result << "Blue" if info[:mana_cost] =~ /U/
    result << "Black" if info[:mana_cost] =~ /B/
    result << "Red" if info[:mana_cost] =~ /R/
    result << "Green" if info[:mana_cost] =~ /G/
    return nil if result.empty?
    result
  end

  def card_color_identity(info)
    result = []
    cost = info[:mana_cost]
    text = info[:card_text]
    types = info[:types]
    result << "W" if cost =~ /W/ or text =~ /\{W\}/ or types =~ /\bPlains\b/
    result << "U" if cost =~ /U/ or text =~ /\{U\}/ or types =~ /\bIsland\b/
    result << "B" if cost =~ /B/ or text =~ /\{B\}/ or types =~ /\bSwamp\b/
    result << "R" if cost =~ /R/ or text =~ /\{R\}/ or types =~ /\bMountain\b/
    result << "G" if cost =~ /G/ or text =~ /\{G\}/ or types =~ /\bForest\b/
    return nil if result.empty?
    result
  end

  def guess_mtgjson_imagename(details)
    # Pertty much reverse engineering from a bunch of examples
    # Just for diffing
    base_name = details.card_info[:card_name].downcase.tr(":", "")
    "#{base_name}#{details.current_variation}"
  end

  def guess_mtgjson_id(set_code, details)
    info = details.card_info
    Digest::SHA1.hexdigest(set_code + info[:card_name] + guess_mtgjson_imagename(details))
  end

  def guess_mci_number(info)
    nil
  end

  def guess_layout(info)
    if info[:card_text] =~ /\ALevel up/
      "leveler"
    else
      "normal"
    end
  end

  def card_ids
    @card_ids ||= Gatherer.card_ids_for_set(@set_name).map{|x| x[1]}.sort
  end

  def export
    json = {}

    json["name"] = @set_name
    # json["code"] = "?"
    # json["gathererCode"] = "?"
    # json["magicCardsInfoCode"] = "?"
    # json["releaseDate"] = "?"
    # json["border"] = "?"
    # json["type"] = "?"
    # json["booster"] = "?"
    # json["mkm_name"] = "?"
    # json["mkm_id"] = "?"
    json["cards"] = []

    card_ids.each do |id|
      details = GathererDetailsPage.new(id)
      info = details.card_info
      # languages = GathererLanguagesPage.new(id)

      supertypes, types, subtypes = parse_types(info[:types])

      card = {}
      card["artist"] = info[:artist]
      card["cmc"] = info[:converted_mana_cost]
      card["colorIdentity"] = card_color_identity(info)
      card["colors"] = card_colors(info)
      card["flavor"] = info[:flavor_text]
      card["id"] = guess_mtgjson_id("LEA", details)
      card["imageName"] = guess_mtgjson_imagename(details)
      card["layout"] = guess_layout(info)
      card["loyalty"] = info[:loyalty]
      card["manaCost"] = info[:mana_cost]
      card["mciNumber"] = info[:card_number] || guess_mci_number(info)
      card["multiverseid"] = id
      card["name"] = info[:card_name]
      card["number"] = info[:card_number]
      card["power"] = info[:power]
      card["rarity"] = info[:rarity]
      card["reserved"] = true if ReservedList.include?(info[:card_name])
      card["subtypes"] = subtypes unless subtypes.empty?
      card["supertypes"] = supertypes unless supertypes.empty?
      card["text"] = info[:card_text]
      card["toughness"] = info[:toughness]
      card["type"] = info[:types]
      card["types"] = types unless types.empty?
      if details.variations
        card["variations"] = details.variations - [id]
      end
      card["watermark"] = info[:watermark]
      card.reject!{|k,v| !v} # HTF ruby doesn't have Hash#compact! yet???
      json["cards"] << card
    end

    Pathname(@save_path).write(JSON.pretty_generate(json)+"\n")
  end
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} \"set name\" save_file_path.json"
  exit 1
end

ExportSetLikeMtgjson.new(*ARGV).export
